// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.1
// source: internal/ffmpeg/pb/ffmpeg.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FFmpegClient is the client API for FFmpeg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FFmpegClient interface {
	PrepareConversion(ctx context.Context, in *PrepareConversionRequest, opts ...grpc.CallOption) (*PrepareConversionResponse, error)
	StartConversion(ctx context.Context, opts ...grpc.CallOption) (FFmpeg_StartConversionClient, error)
	StopConversion(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error)
	GetProgress(ctx context.Context, in *Query, opts ...grpc.CallOption) (FFmpeg_GetProgressClient, error)
}

type fFmpegClient struct {
	cc grpc.ClientConnInterface
}

func NewFFmpegClient(cc grpc.ClientConnInterface) FFmpegClient {
	return &fFmpegClient{cc}
}

func (c *fFmpegClient) PrepareConversion(ctx context.Context, in *PrepareConversionRequest, opts ...grpc.CallOption) (*PrepareConversionResponse, error) {
	out := new(PrepareConversionResponse)
	err := c.cc.Invoke(ctx, "/ffmpeg.FFmpeg/PrepareConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fFmpegClient) StartConversion(ctx context.Context, opts ...grpc.CallOption) (FFmpeg_StartConversionClient, error) {
	stream, err := c.cc.NewStream(ctx, &FFmpeg_ServiceDesc.Streams[0], "/ffmpeg.FFmpeg/StartConversion", opts...)
	if err != nil {
		return nil, err
	}
	x := &fFmpegStartConversionClient{stream}
	return x, nil
}

type FFmpeg_StartConversionClient interface {
	Send(*ConversionContent) error
	Recv() (*ConversionResponse, error)
	grpc.ClientStream
}

type fFmpegStartConversionClient struct {
	grpc.ClientStream
}

func (x *fFmpegStartConversionClient) Send(m *ConversionContent) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fFmpegStartConversionClient) Recv() (*ConversionResponse, error) {
	m := new(ConversionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fFmpegClient) StopConversion(ctx context.Context, in *Query, opts ...grpc.CallOption) (*Query, error) {
	out := new(Query)
	err := c.cc.Invoke(ctx, "/ffmpeg.FFmpeg/StopConversion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fFmpegClient) GetProgress(ctx context.Context, in *Query, opts ...grpc.CallOption) (FFmpeg_GetProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &FFmpeg_ServiceDesc.Streams[1], "/ffmpeg.FFmpeg/GetProgress", opts...)
	if err != nil {
		return nil, err
	}
	x := &fFmpegGetProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FFmpeg_GetProgressClient interface {
	Recv() (*Progress, error)
	grpc.ClientStream
}

type fFmpegGetProgressClient struct {
	grpc.ClientStream
}

func (x *fFmpegGetProgressClient) Recv() (*Progress, error) {
	m := new(Progress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FFmpegServer is the server API for FFmpeg service.
// All implementations must embed UnimplementedFFmpegServer
// for forward compatibility
type FFmpegServer interface {
	PrepareConversion(context.Context, *PrepareConversionRequest) (*PrepareConversionResponse, error)
	StartConversion(FFmpeg_StartConversionServer) error
	StopConversion(context.Context, *Query) (*Query, error)
	GetProgress(*Query, FFmpeg_GetProgressServer) error
	mustEmbedUnimplementedFFmpegServer()
}

// UnimplementedFFmpegServer must be embedded to have forward compatible implementations.
type UnimplementedFFmpegServer struct {
}

func (UnimplementedFFmpegServer) PrepareConversion(context.Context, *PrepareConversionRequest) (*PrepareConversionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareConversion not implemented")
}
func (UnimplementedFFmpegServer) StartConversion(FFmpeg_StartConversionServer) error {
	return status.Errorf(codes.Unimplemented, "method StartConversion not implemented")
}
func (UnimplementedFFmpegServer) StopConversion(context.Context, *Query) (*Query, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopConversion not implemented")
}
func (UnimplementedFFmpegServer) GetProgress(*Query, FFmpeg_GetProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method GetProgress not implemented")
}
func (UnimplementedFFmpegServer) mustEmbedUnimplementedFFmpegServer() {}

// UnsafeFFmpegServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FFmpegServer will
// result in compilation errors.
type UnsafeFFmpegServer interface {
	mustEmbedUnimplementedFFmpegServer()
}

func RegisterFFmpegServer(s grpc.ServiceRegistrar, srv FFmpegServer) {
	s.RegisterService(&FFmpeg_ServiceDesc, srv)
}

func _FFmpeg_PrepareConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrepareConversionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FFmpegServer).PrepareConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ffmpeg.FFmpeg/PrepareConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FFmpegServer).PrepareConversion(ctx, req.(*PrepareConversionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FFmpeg_StartConversion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FFmpegServer).StartConversion(&fFmpegStartConversionServer{stream})
}

type FFmpeg_StartConversionServer interface {
	Send(*ConversionResponse) error
	Recv() (*ConversionContent, error)
	grpc.ServerStream
}

type fFmpegStartConversionServer struct {
	grpc.ServerStream
}

func (x *fFmpegStartConversionServer) Send(m *ConversionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fFmpegStartConversionServer) Recv() (*ConversionContent, error) {
	m := new(ConversionContent)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FFmpeg_StopConversion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FFmpegServer).StopConversion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ffmpeg.FFmpeg/StopConversion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FFmpegServer).StopConversion(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _FFmpeg_GetProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FFmpegServer).GetProgress(m, &fFmpegGetProgressServer{stream})
}

type FFmpeg_GetProgressServer interface {
	Send(*Progress) error
	grpc.ServerStream
}

type fFmpegGetProgressServer struct {
	grpc.ServerStream
}

func (x *fFmpegGetProgressServer) Send(m *Progress) error {
	return x.ServerStream.SendMsg(m)
}

// FFmpeg_ServiceDesc is the grpc.ServiceDesc for FFmpeg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FFmpeg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ffmpeg.FFmpeg",
	HandlerType: (*FFmpegServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrepareConversion",
			Handler:    _FFmpeg_PrepareConversion_Handler,
		},
		{
			MethodName: "StopConversion",
			Handler:    _FFmpeg_StopConversion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartConversion",
			Handler:       _FFmpeg_StartConversion_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetProgress",
			Handler:       _FFmpeg_GetProgress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/ffmpeg/pb/ffmpeg.proto",
}
